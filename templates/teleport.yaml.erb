---
# By default, this file should be stored in /etc/teleport.yaml

# This section of the configuration file applies to all teleport
# services.
teleport:
  # nodename allows to assign an alternative name this node can be reached by.
  # by default it's equal to hostname
  nodename: <%= scope.lookupvar('teleport::nodename') %>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::data_dir")) -%>
  # Data directory where Teleport keeps its data, like keys/users for 
  # authentication (if using the default BoltDB back-end)
  data_dir: <%= scope.lookupvar('teleport::data_dir') -%>
<% end -%>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::auth_token")) -%>
  # one-time invitation token used to join a cluster. it is not used on
  # subsequent starts
  auth_token: <%= scope.lookupvar('teleport::auth_token') -%>
<% end -%>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::advertise_ip")) -%>
  # Data directory where Teleport keeps its data, like keys/users for
  # authentication (if using the default BoltDB back-end)
  advertise_ip: <%= scope.lookupvar('teleport::advertise_ip') -%>
<% end -%>

  # list of auth servers in a cluster. you will have more than one auth server
  # if you configure teleport auth to run in HA configuration
  auth_servers:
<% scope.lookupvar('teleport::auth_servers').flatten.each do |server| -%>
    - <%= server %>
<% end -%>

  # Teleport throttles all connections to avoid abuse. These settings allow
  # you to adjust the default limits
  connection_limits:
    max_connections: <%= scope.lookupvar('teleport::max_connections') %>
    max_users: <%= scope.lookupvar('teleport::max_users') %>

  # Logging configuration. Possible output values are 'stdout', 'stderr' and 
  # 'syslog'. Possible severity values are INFO, WARN and ERROR (default).
  log:
    output: <%= scope.lookupvar('teleport::log_dest') %>
    severity: <%= scope.lookupvar('teleport::log_level') %>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::storage_backend")) -%>
  # Type of storage used for keys. You need to configure this to use etcd
  # backend if you want to run Teleport in HA configuration.  
  storage: 
    type: <%= scope.lookupvar('teleport::storage_backend') %>
<% end -%>

# This section configures the 'auth service':
auth_service:
  enabled: <%= scope.lookupvar('teleport::auth_enable') %>

  # Turns on dynamic configuration. Dynamic configuration defines the source
  # for configuration information, configuration files on disk or what's
  # stored in the backend. Default is false if no backend is specified,
  # otherwise if backend is specified, it is assumed to be true.
  dynamic_config: <%= scope.lookupvar('teleport::dynamic_config') %>
  listen_addr: <%= scope.lookupvar('teleport::auth_listen_addr') -%>:<%= scope.lookupvar('teleport::auth_listen_port') %>
<% unless scope.lookupvar('teleport::auth_service_tokens').empty? -%>
  tokens:
<% scope.lookupvar('teleport::auth_service_tokens').flatten.each do |token| -%>
    - <%= token %>
<% end -%>
<% end -%>

<% unless scope.lookupvar('teleport::authentication').empty? -%>
  # defines the types and second factors the auth server supports
  authentication:
    # type can be local or oidc
    type: <%= scope.lookupvar('teleport::authentication')['type'] %>
    # second_factor can be off, otp, or u2f
    second_factor: <%= scope.lookupvar('teleport::authentication')['second_factor'] %>

    <%- if scope.lookupvar('teleport::authentication')['second_factor'] == 'u2f' -%>
    # this section is only used if using u2f
    u2f:
      # app_id should point to the Web UI.
      app_id: <%= scope.lookupvar('teleport::authentication')['u2f']['app_id'] %>
      <%- unless scope.lookupvar('teleport::authentication')['u2f']['facets'].empty? -%>
      # facets should list all proxy servers.
      facets:
        <%- scope.lookupvar('teleport::authentication')['u2f']['facets'].flatten.each do |facets| -%>
        - <%= facets %>
        <%- end -%>
      <%- end -%>
    <%- end -%>
<% end -%>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::cluster_name")) -%>
  cluster_name: <%= scope.lookupvar('teleport::cluster_name') %>
<% end -%>
<% unless scope.lookupvar('teleport::trusted_clusters').empty? -%>
  trusted_clusters: <%- scope.lookupvar('teleport::trusted_clusters').each do |key, value| %>
<%- if key == 'key_file' -%>
    <%= "- #{key}: #{value}" -%>
<%- else -%>
      <%= "#{key}: #{value}" -%>
<%- end -%>
<%- end -%>

<% end -%>

# This section configures the 'node service':
ssh_service:
  enabled: <%= scope.lookupvar('teleport::ssh_enable') %>
  listen_addr: <%= scope.lookupvar('teleport::ssh_listen_addr') -%>:<%= scope.lookupvar('teleport::ssh_listen_port') %>
<% unless scope.lookupvar('teleport::labels').empty? -%>
  labels:
<% scope.lookupvar('teleport::labels').sort.each do |key,value| -%>
    <%= key %>: <%= value %>
<% end -%>
<% end -%>

# This section configures the 'proxy service'
proxy_service:
  enabled: <%= scope.lookupvar('teleport::proxy_enable') %>
  listen_addr: <%= scope.lookupvar('teleport::proxy_listen_addr') -%>:<%= scope.lookupvar('teleport::proxy_listen_port') %>
  web_listen_addr: <%= scope.lookupvar('teleport::proxy_web_listen_addr') -%>:<%= scope.lookupvar('teleport::proxy_web_listen_port') %>
<% if scope.lookupvar('teleport::proxy_ssl') == true -%>
  # TLS certificate for the server-side HTTPS connection.
  # Configuring these properly is critical for Teleport security.
  https_key_file: <%= scope.lookupvar('teleport::proxy_ssl_key') %>
  https_cert_file: <%= scope.lookupvar('teleport::proxy_ssl_cert') %>
<% end -%>
